generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  username        String?
  displayUsername String?
  bio             String?
  location        String?
  website         String?

  sessions Session[]
  accounts Account[]

  questions Question[]
  comments  Comment[]
  votes     QuestionVote[]
  viewsLog  QuestionView[]

  followers Follows[] @relation("following") // people who follow this user
  following Follows[] @relation("follower") // people this user is following

  answers     Answer[]
  answerVotes AnswerVote[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Question {
  id        String         @id @default(cuid())
  authorId  String
  title     String
  excerpt   String
  content   String
  tags      String[] // Postgres can store array types
  createdAt DateTime       @default(now())
  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  votes     QuestionVote[]
  viewsLog  QuestionView[]
  Answer    Answer[]
}

model QuestionVote {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  value      Int // 1 for upvote, -1 for downvote
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId]) // Prevents duplicate voting
}

model QuestionView {
  id         String   @id @default(cuid())
  questionId String
  userId     String
  createdAt  DateTime @default(now())

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([questionId, userId]) // ðŸ‘ˆ one view per user per question
}

model Answer {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId   String
  questionId String

  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  comments Comment[]    @relation("AnswerComments")
  votes    AnswerVote[] // Optional: if you want upvote/downvote on answers

  @@index([authorId])
  @@index([questionId])
}

model AnswerVote {
  id        String   @id @default(cuid())
  value     Int // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())

  userId   String
  answerId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@unique([userId, answerId]) // Prevents duplicate votes
}

model Comment {
  id         String  @id @default(cuid())
  content    String
  userId     String
  questionId String?
  answerId   String?

  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  question  Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer    Answer?   @relation("AnswerComments", fields: [answerId], references: [id], onDelete: Cascade)

  @@index([userId, questionId, answerId])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId]) // Composite Primary Key
  @@index([followerId, followingId])
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
